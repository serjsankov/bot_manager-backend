import json
import os
from fastapi import Depends
from datetime import date, datetime
from db.db import get_db_conn
import asyncio

# –ü—É—Ç—å –∫ JSON-—Ñ–∞–π–ª—É –ª–æ–≥–∞
LOG_FILE = os.path.join(os.getcwd(), "birthday_log.json")

# –®–∞–±–ª–æ–Ω—ã –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–π
MALE_TEMPLATES = [
    "–° –¥–Ω–µ–º —Ä–æ–∂–¥–µ–Ω–∏—è, @{username}! üéâ –ñ–µ–ª–∞—é —É—Å–ø–µ—Ö–æ–≤ –∏ —Å—á–∞—Å—Ç—å—è!",
    "–ü–æ–∑–¥—Ä–∞–≤–ª—è—é —Ç–µ–±—è, @{username}! –ü—É—Å—Ç—å –¥–µ–Ω—å –±—É–¥–µ—Ç —Å—É–ø–µ—Ä!"
]

FEMALE_TEMPLATES = [
    "–° –¥–Ω–µ–º —Ä–æ–∂–¥–µ–Ω–∏—è, @{username}! üéÄ –ü—É—Å—Ç—å —Å–±—É–¥—É—Ç—Å—è –≤—Å–µ –º–µ—á—Ç—ã!",
    "–ü–æ–∑–¥—Ä–∞–≤–ª—è—é, @{username}! –ü—É—Å—Ç—å –¥–µ–Ω—å –±—É–¥–µ—Ç –≤–æ–ª—à–µ–±–Ω—ã–º!"
]

# --- –†–∞–±–æ—Ç–∞ —Å JSON –ª–æ–≥–æ–º ---
def load_log():
    if not os.path.exists(LOG_FILE):
        return {}
    with open(LOG_FILE, "r", encoding="utf-8") as f:
        try:
            return json.load(f)
        except json.JSONDecodeError:
            return {}

def save_log(log_data):
    with open(LOG_FILE, "w", encoding="utf-8") as f:
        json.dump(log_data, f, ensure_ascii=False, indent=4)

def add_to_log(user_id):
    today_str = date.today().isoformat()
    log = load_log()
    log.setdefault(today_str, [])
    if user_id not in log[today_str]:
        log[today_str].append(user_id)
    save_log(log)

def has_been_congratulated(user_id):
    today_str = date.today().isoformat()
    log = load_log()
    return today_str in log and user_id in log[today_str]

# --- –ê–≤—Ç–æ-–æ—á–∏—Å—Ç–∫–∞ 31 –¥–µ–∫–∞–±—Ä—è ---
def clear_log_if_new_year():
    today = date.today()
    if today.month == 12 and today.day == 31:
        save_log({})

# --- –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è ---
async def send_birthday_congratulations(bot):
    clear_log_if_new_year()
    today_str = date.today().strftime("%m-%d")

    # –ü–æ–ª—É—á–∞–µ–º –∫—É—Ä—Å–æ—Ä –∏–∑ –ø—É–ª–∞
    async for cur in get_db_conn():  # –ø–µ—Ä–µ–±–æ—Ä –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞
        await cur.execute(
            "SELECT id, tg_id, username, gender FROM users_managers WHERE DATE_FORMAT(birth_date, '%%m-%%d') = %s",
            (today_str,)
        )
        users = await cur.fetchall()

        for user in users:
            user_id = user["tg_id"]
            username = user.get("username") or ""
            gender = user.get("gender") or "man"

            if has_been_congratulated(user_id):
                continue

            template = FEMALE_TEMPLATES[0] if gender.lower() == "woman" else MALE_TEMPLATES[0]
            message = template.replace("@{username}", f"@{username}" if username else "")

            try:
                await bot.send_message(user_id, message)
                add_to_log(user_id)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è {user_id}: {e}")