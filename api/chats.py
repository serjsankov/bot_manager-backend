from fastapi import APIRouter, Depends, Request, HTTPException
from db.db import get_db_conn
from .auth import telegram_user
from services.telegram import check_bot_in_chat, update_chat_title, notify_user_about_group, notify_user_about_removal, remove_user_from_chat

router = APIRouter()

@router.get("/")
async def list_chats(user=Depends(telegram_user), db=Depends(get_db_conn)):
    await db.execute("SELECT * FROM chats")  # ‚ö° execute
    rows = await db.fetchall()                   # ‚ö° fetchall
    return rows                                  # DictCursor —É–∂–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä–∏

@router.post("/")
async def add_chat(data: dict, request: Request, user=Depends(telegram_user), db=Depends(get_db_conn)):
     # 1. –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —á–∞—Ç
    value = data.get("value")
    link = data.get("link")
    group_id = data.get("group_id")

    # 1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ–±–∞–≤–ª–µ–Ω –ª–∏ –±–æ—Ç –≤ —á–∞—Ç
    is_accessible = await check_bot_in_chat(group_id)
    if not is_accessible:
        raise HTTPException(status_code=400, detail="–ë–æ—Ç –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –≤ —ç—Ç–æ—Ç —á–∞—Ç –∏–ª–∏ —Å—Å—ã–ª–∫–∞ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞")
    
    # 2Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —á–∞—Ç –≤ –ë–î
    await db.execute("SELECT id FROM chats WHERE group_id = %s", (group_id,))
    existing = await db.fetchone()
    if existing:
        raise HTTPException(status_code=400, detail="–≠—Ç–æ—Ç —á–∞—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
    
    # 3Ô∏è‚É£ –î–æ–±–∞–≤–ª—è–µ–º —á–∞—Ç
    await db.execute(
        "INSERT INTO chats (value, group_id, link) VALUES (%s, %s, %s)",
        (value, group_id, link)
    )

    await db.execute("SELECT LAST_INSERT_ID() AS id")
    row = await db.fetchone()
    new_chat_id = row["id"]


    users_ids = data.get("users_ids", [])
    if users_ids:
        values = [(user_id, new_chat_id) for user_id in users_ids]
        await db.executemany(
            "INSERT IGNORE INTO user_chats (user_id, chat_id) VALUES (%s, %s)",
            values
        )

        # 5Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–∞–∂–¥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        # for user_id in users_ids:
        #     text = (
        #         f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π!\n"
        #         f"–í—ã –±—ã–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –Ω–æ–≤—ã–π —á–∞—Ç.\n"
        #         f"–ù–∞–∑–≤–∞–Ω–∏–µ —á–∞—Ç–∞: {value}\n"
        #         f"Chat ID: {group_id}\n"
        #         f"–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞."
        #     )
        #     try:
        #         await send_message_safe(user_id, text)
        #     except Exception as e:
        #         print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

    await db.execute("SELECT * FROM chats")
    rows = await db.fetchall()
    return rows


@router.post("/delete")
async def delete_chat(request: Request, user=Depends(telegram_user), db=Depends(get_db_conn)):
    data = await request.json()
    chat_id = data.pop("id", None)

    if not chat_id:
        return {"error": "id is required"}

    await db.execute("DELETE FROM chats WHERE id=%s", (chat_id,))

    await db.execute("DELETE FROM user_chats WHERE chat_id=%s", (chat_id))
    await db.execute("DELETE FROM role_chat WHERE chat_id=%s", (chat_id))

    await db.execute("SELECT * FROM chats")
    chats = await db.fetchall()
    return chats

@router.post("/data")
async def all_data_role( request: Request, data: dict, user=Depends(telegram_user), db=Depends(get_db_conn)):
    chat_id = data.get("id")

    # –ø–æ–ª—É—á–∞–µ–º —á–∞—Ç
    await db.execute("SELECT * FROM chats WHERE id=%s", (chat_id,))
    chat = await db.fetchone()

    # –ø–æ–ª—É—á–∞–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å —ç—Ç–∏–º —á–∞—Ç–æ–º
    await db.execute("""
        SELECT 
            um.id,
            um.full_name,
            um.department,
            um.role,
            um.username
        FROM user_chats uc
        JOIN users_managers um ON uc.user_id = um.id
        WHERE uc.chat_id = %s
    """, (chat_id,))
    employees = await db.fetchall()

    return {
        "chat": chat,
        "employees": employees,
    }

@router.post("/edit/")
async def change_role(request: Request, data: dict, user=Depends(telegram_user), db=Depends(get_db_conn)):
    chat_id = data.get("id")  # –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π id —Ç–∞–±–ª–∏—Ü—ã chats
    new_value = data.get("value")  # –Ω–æ–≤–æ–µ –∏–º—è –≥—Ä—É–ø–ø—ã
    new_user_ids = set(data.get("user_ids", []))

    # --- 1. –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ
    await db.execute("SELECT value, group_id, link FROM chats WHERE id=%s", (chat_id,))
    row = await db.fetchone()
    if not row:
        return {"error": "–ß–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"}

    old_value = row["value"]
    group_id = row["group_id"]  # –Ω–∞—Å—Ç–æ—è—â–∏–π Telegram chat_id
    group_link = row["link"]

    # --- 2. –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ä—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    await db.execute("SELECT user_id FROM user_chats WHERE chat_id=%s", (chat_id,))
    old_user_ids = {u["user_id"] for u in await db.fetchall()}

    to_add = new_user_ids - old_user_ids
    to_remove = old_user_ids - new_user_ids

    # --- 3. –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã –≤ –ë–î
    await db.execute("UPDATE chats SET value=%s WHERE id=%s", (new_value, chat_id))

    # --- 4. –û–±–Ω–æ–≤–ª—è–µ–º —Å–≤—è–∑–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –ë–î
    if to_add:
        await db.executemany(
            "INSERT IGNORE INTO user_chats (chat_id, user_id) VALUES (%s, %s)",
            [(chat_id, uid) for uid in to_add]
        )
    if to_remove:
        await db.execute(
            "DELETE FROM user_chats WHERE chat_id=%s AND user_id IN %s",
            (chat_id, tuple(to_remove))
        )

    # --- 5. –ú–µ–Ω—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–ª–µ–≥—Ä–∞–º-–≥—Ä—É–ø–ø—ã
    if new_value != old_value:
        print(f"üõ† –ú–µ–Ω—è—é –Ω–∞–∑–≤–∞–Ω–∏–µ Telegram –≥—Ä—É–ø–ø—ã {group_id}: '{old_value}' ‚Üí '{new_value}'")
        await update_chat_title(group_id, new_value)

    # --- 6. –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –≥—Ä—É–ø–ø—É
    # try:
    #     chat = await bot.get_chat(group_id)
    #     invite_link = getattr(chat, "invite_link", None)
    #     if not invite_link:
    #         print(f"‚ö† –ù–µ—Ç —Å—Å—ã–ª–∫–∏ –Ω–∞ –≥—Ä—É–ø–ø—É {group_id}")
    # except Exception as e:
    #     invite_link = None
    #     print(f"‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –≥—Ä—É–ø–ø—É: {e}")

    # --- 7. –û–ø–æ–≤–µ—â–∞–µ–º –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –¥–æ–±–∞–≤–ª—è–µ–º –≤ –≥—Ä—É–ø–ø—É
    if to_add:
        await db.execute("SELECT tg_id FROM users_managers WHERE id IN %s", (tuple(to_add),))
        tg_users = await db.fetchall()

        for u in tg_users:
            tg_id = u["tg_id"]
            if tg_id:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –≥—Ä—É–ø–ø—É
                text = f"{new_value}"
                if group_link:
                    text += f"\n–°—Å—ã–ª–∫–∞ –Ω–∞ –≥—Ä—É–ø–ø—É: {group_link}"
                try:
                    await notify_user_about_group(tg_id, text)
                except Exception as e:
                    print(f"‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {tg_id}: {e}")
            else:
                print(f"‚ö† –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç telegram_id, –ø—Ä–æ–ø—É—Å–∫–∞—é: {u}")

    # --- 8. –û–ø–æ–≤–µ—â–∞–µ–º –∏ –∏—Å–∫–ª—é—á–∞–µ–º —É–¥–∞–ª—ë–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    if to_remove:
        await db.execute("SELECT tg_id FROM users_managers WHERE id IN %s", (tuple(to_remove),))
        tg_users_removed = await db.fetchall()

        for u in tg_users_removed:
            tg_id = u["tg_id"]
            if tg_id:
                try:
                    # üßπ –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Telegram-–≥—Ä—É–ø–ø—ã
                    await remove_user_from_chat(group_id, tg_id)

                    # üì® –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É–¥–∞–ª–µ–Ω–∏–∏
                    await notify_user_about_removal(tg_id, new_value)

                except Exception as e:
                    print(f"‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å {tg_id} –∏–∑ Telegram-–≥—Ä—É–ø–ø—ã {group_id}: {e}")
            else:
                print(f"‚ö† –£ —É–¥–∞–ª—ë–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç telegram_id, –ø—Ä–æ–ø—É—Å–∫–∞—é: {u}")

    # --- 9. –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
    await db.execute("SELECT * FROM chats")
    chats = await db.fetchall()

    return {"success": True, "updated_chat": chat_id, "chats": chats}
